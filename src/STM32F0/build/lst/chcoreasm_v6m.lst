ARM GAS  /tmp/ccapTTZd.s 			page 1


   1              	# 1 "../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S"
   1              	/*
   1              	...
   0              	
   0              	
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    compilers/GCC/chcoreasm_v6m.S
  22              	 * @brief   ARMv6-M architecture port low level code.
  23              	 *
  24              	 * @addtogroup ARMCMx_GCC_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#if !defined(FALSE) || defined(__DOXYGEN__)
  29              	#define FALSE   0
  30              	#endif
  31              	
  32              	#if !defined(TRUE) || defined(__DOXYGEN__)
  33              	#define TRUE    1
  34              	#endif
  35              	
  36              	#define _FROM_ASM_
  37              	#include "chlicense.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
ARM GAS  /tmp/ccapTTZd.s 			page 2


  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    chlicense.h
  22              	 * @brief   License Module macros and structures.
  23              	 *
  24              	 * @addtogroup chibios_license
  25              	 * @details This module contains all the definitions required for defining
  26              	 *          a licensing scheme for customers or public releases.
  27              	 * @{
  28              	 */
  29              	
  30              	#ifndef CHLICENSE_H
  31              	#define CHLICENSE_H
  32              	
  33              	/*===========================================================================*/
  34              	/* Module constants.                                                         */
  35              	/*===========================================================================*/
  36              	
  37              	/**
  38              	 * @name   Allowed Features Levels
  39              	 * @{
  40              	 */
  41              	#define CH_FEATURES_BASIC                   0
  42              	#define CH_FEATURES_INTERMEDIATE            1
  43              	#define CH_FEATURES_FULL                    2
  44              	/** @} */
  45              	
  46              	/**
  47              	 * @name    Deployment Options
  48              	 */
  49              	#define CH_DEPLOY_UNLIMITED                -1
  50              	#define CH_DEPLOY_NONE                      0
  51              	/** @} */
  52              	
  53              	/**
  54              	 * @name    Licensing Options
  55              	 * @{
  56              	 */
  57              	#define CH_LICENSE_GPL                      0
  58              	#define CH_LICENSE_GPL_EXCEPTION            1
  59              	#define CH_LICENSE_COMMERCIAL_FREE          2
  60              	#define CH_LICENSE_COMMERCIAL_DEV_1000      3
  61              	#define CH_LICENSE_COMMERCIAL_DEV_5000      4
  62              	#define CH_LICENSE_COMMERCIAL_FULL          5
  63              	#define CH_LICENSE_COMMERCIAL_RUNTIME       6
  64              	#define CH_LICENSE_PARTNER                  7
  65              	/** @} */
  66              	
  67              	#include "chcustomer.h"
   1              	/*
  68              	#if CH_LICENSE == CH_LICENSE_PARTNER
  38              	#include "chconf.h"
   1              	/*
  39              	#include "chcore.h"
   1              	/*
ARM GAS  /tmp/ccapTTZd.s 			page 3


   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio.
   3              	
   4              	    This file is part of ChibiOS.
   5              	
   6              	    ChibiOS is free software; you can redistribute it and/or modify
   7              	    it under the terms of the GNU General Public License as published by
   8              	    the Free Software Foundation; either version 3 of the License, or
   9              	    (at your option) any later version.
  10              	
  11              	    ChibiOS is distributed in the hope that it will be useful,
  12              	    but WITHOUT ANY WARRANTY; without even the implied warranty of
  13              	    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14              	    GNU General Public License for more details.
  15              	
  16              	    You should have received a copy of the GNU General Public License
  17              	    along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18              	*/
  19              	
  20              	/**
  21              	 * @file    ARMCMx/chcore.h
  22              	 * @brief   ARM Cortex-Mx port macros and structures.
  23              	 *
  24              	 * @addtogroup ARMCMx_CORE
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CHCORE_H
  29              	#define CHCORE_H
  30              	
  31              	/*===========================================================================*/
  32              	/* Module constants.                                                         */
  33              	/*===========================================================================*/
  34              	
  35              	/**
  36              	 * @name    Architecture and Compiler
  37              	 * @{
  38              	 */
  39              	/**
  40              	 * @brief   Macro defining a generic ARM architecture.
  41              	 */
  42              	#define PORT_ARCHITECTURE_ARM
  43              	
  44              	/* The following code is not processed when the file is included from an
  45              	   asm module because those intrinsic macros are not necessarily defined
  46              	   by the assembler too.*/
  47              	#if !defined(_FROM_ASM_)
  48              	
  49              	/**
  50              	 * @brief   Compiler name and version.
  51              	 */
  52              	#if defined(__GNUC__) || defined(__DOXYGEN__)
  53              	#define PORT_COMPILER_NAME              "GCC " __VERSION__
  54              	
  55              	#elif defined(__ICCARM__)
  56              	#define PORT_COMPILER_NAME              "IAR"
  57              	
  58              	#elif defined(__CC_ARM)
ARM GAS  /tmp/ccapTTZd.s 			page 4


  59              	#define PORT_COMPILER_NAME              "RVCT"
  60              	
  61              	#else
  62              	#error "unsupported compiler"
  63              	#endif
  64              	
  65              	#endif /* !defined(_FROM_ASM_) */
  66              	
  67              	/** @} */
  68              	
  69              	/* Inclusion of the Cortex-Mx implementation specific parameters.*/
  70              	#include "cmparams.h"
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    STM32F0xx/cmparams.h
  19              	 * @brief   ARM Cortex-M0 parameters for the STM32F0xx.
  20              	 *
  21              	 * @defgroup ARMCMx_STM32F0xx STM32F0xx Specific Parameters
  22              	 * @ingroup ARMCMx_SPECIFIC
  23              	 * @details This file contains the Cortex-M0 specific parameters for the
  24              	 *          STM32F0xx platform.
  25              	 * @{
  26              	 */
  27              	
  28              	#ifndef CMPARAMS_H
  29              	#define CMPARAMS_H
  30              	
  31              	/**
  32              	 * @brief   Cortex core model.
  33              	 */
  34              	#define CORTEX_MODEL            0
  35              	
  36              	/**
  37              	 * @brief   Floating Point unit presence.
  38              	 */
  39              	#define CORTEX_HAS_FPU          0
  40              	
  41              	/**
  42              	 * @brief   Number of bits in priority masks.
  43              	 */
  44              	#define CORTEX_PRIORITY_BITS    2
  45              	
ARM GAS  /tmp/ccapTTZd.s 			page 5


  46              	/* If the device type is not externally defined, for example from the Makefile,
  47              	   then a file named board.h is included. This file must contain a device
  48              	   definition compatible with the vendor include file.*/
  49              	#if !defined (STM32F030x4) && !defined (STM32F030x6) &&                     \
  50              	    !defined (STM32F030x8) && !defined (STM32F030xC) &&                     \
  51              	    !defined (STM32F070x6) && !defined (STM32F070xB) &&                     \
  52              	    !defined (STM32F031x6) && !defined (STM32F051x8) &&                     \
  53              	    !defined (STM32F071xB) && !defined (STM32F091xC) &&                     \
  54              	    !defined (STM32F042x6) && !defined (STM32F072xB) &&                     \
  55              	    !defined (STM32F038xx) && !defined (STM32F048xx) &&                     \
  56              	    !defined (STM32F058xx) && !defined (STM32F078xx) &&                     \
  57              	    !defined (STM32F098xx)                                                  \
  58              	
  59              	#include "board.h"
   1              	/*
  60              	#endif
  71              	
  72              	/*===========================================================================*/
  73              	/* Module pre-compile time settings.                                         */
  74              	/*===========================================================================*/
  75              	
  76              	/**
  77              	 * @brief   Enables an alternative timer implementation.
  78              	 * @details Usually the port uses a timer interface defined in the file
  79              	 *          @p chcore_timer.h, if this option is enabled then the file
  80              	 *          @p chcore_timer_alt.h is included instead.
  81              	 */
  82              	#if !defined(PORT_USE_ALT_TIMER)
  83              	#define PORT_USE_ALT_TIMER              FALSE
  84              	#endif
  85              	
  86              	/*===========================================================================*/
  87              	/* Derived constants and error checks.                                       */
  88              	/*===========================================================================*/
  89              	
  90              	/*===========================================================================*/
  91              	/* Module data structures and types.                                         */
  92              	/*===========================================================================*/
  93              	
  94              	/* The following code is not processed when the file is included from an
  95              	   asm module.*/
  96              	#if !defined(_FROM_ASM_)
  97              	
  98              	/**
  99              	 * @brief   Type of stack and memory alignment enforcement.
 100              	 * @note    In this architecture the stack alignment is enforced to 64 bits,
 101              	 *          32 bits alignment is supported by hardware but deprecated by ARM,
 102              	 *          the implementation choice is to not offer the option.
 103              	 */
 104              	typedef uint64_t stkalign_t;
 105              	
 106              	/* The following declarations are there just for Doxygen documentation, the
 107              	   real declarations are inside the sub-headers being specific for the
 108              	   sub-architectures.*/
 109              	#if defined(__DOXYGEN__)
 110              	/**
 111              	 * @brief   Interrupt saved context.
ARM GAS  /tmp/ccapTTZd.s 			page 6


 112              	 * @details This structure represents the stack frame saved during a
 113              	 *          preemption-capable interrupt handler.
 114              	 * @note    It is implemented to match the Cortex-Mx exception context.
 115              	 */
 116              	struct port_extctx {};
 117              	
 118              	/**
 119              	 * @brief   System saved context.
 120              	 * @details This structure represents the inner stack frame during a context
 121              	 *          switch.
 122              	 */
 123              	struct port_intctx {};
 124              	
 125              	/**
 126              	 * @brief   Platform dependent part of the @p thread_t structure.
 127              	 * @details In this port the structure just holds a pointer to the
 128              	 *          @p port_intctx structure representing the stack pointer
 129              	 *          at context switch time.
 130              	 */
 131              	struct port_context {};
 132              	#endif /* defined(__DOXYGEN__) */
 133              	
 134              	#endif /* !defined(_FROM_ASM_) */
 135              	
 136              	/*===========================================================================*/
 137              	/* Module macros.                                                            */
 138              	/*===========================================================================*/
 139              	
 140              	/**
 141              	 * @brief   Total priority levels.
 142              	 */
 143              	#define CORTEX_PRIORITY_LEVELS          (1U << CORTEX_PRIORITY_BITS)
 144              	
 145              	/**
 146              	 * @brief   Minimum priority level.
 147              	 * @details This minimum priority level is calculated from the number of
 148              	 *          priority bits supported by the specific Cortex-Mx implementation.
 149              	 */
 150              	#define CORTEX_MINIMUM_PRIORITY         (CORTEX_PRIORITY_LEVELS - 1)
 151              	
 152              	/**
 153              	 * @brief   Maximum priority level.
 154              	 * @details The maximum allowed priority level is always zero.
 155              	 */
 156              	#define CORTEX_MAXIMUM_PRIORITY         0U
 157              	
 158              	/**
 159              	 * @brief   Priority level to priority mask conversion macro.
 160              	 */
 161              	#define CORTEX_PRIO_MASK(n)                                                 \
 162              	  ((n) << (8U - (unsigned)CORTEX_PRIORITY_BITS))
 163              	
 164              	/**
 165              	 * @brief   Priority level verification macro.
 166              	 */
 167              	#define PORT_IRQ_IS_VALID_PRIORITY(n)                                       \
 168              	  (((n) >= 0U) && ((n) < CORTEX_PRIORITY_LEVELS))
ARM GAS  /tmp/ccapTTZd.s 			page 7


 169              	
 170              	/**
 171              	 * @brief   Priority level verification macro.
 172              	 */
 173              	#define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n)                                \
 174              	  (((n) >= CORTEX_MAX_KERNEL_PRIORITY) && ((n) < CORTEX_PRIORITY_LEVELS))
 175              	
 176              	/*===========================================================================*/
 177              	/* External declarations.                                                    */
 178              	/*===========================================================================*/
 179              	
 180              	/*===========================================================================*/
 181              	/* Module inline functions.                                                  */
 182              	/*===========================================================================*/
 183              	
 184              	/* Includes the sub-architecture-specific part.*/
 185              	#if (CORTEX_MODEL == 0) || (CORTEX_MODEL == 1)
 186              	#include "chcore_v6m.h"
   1              	/*
 187              	#elif (CORTEX_MODEL == 3) || (CORTEX_MODEL == 4) || (CORTEX_MODEL == 7)
  40              	
  41              	#if !defined(__DOXYGEN__)
  42              	
  43              	/*
  44              	 * RTOS-specific context offset.
  45              	 */
  46              	#if defined(_CHIBIOS_RT_CONF_)
  47              	#define CONTEXT_OFFSET  12
  48              	#elif defined(_CHIBIOS_NIL_CONF_)
  49              	#define CONTEXT_OFFSET  0
  50              	#else
  51              	#error "invalid chconf.h"
  52              	#endif
  53              	
  54              	                .set    SCB_ICSR, 0xE000ED04
  55              	                .set    ICSR_PENDSVSET, 0x10000000
  56              	                .set    ICSR_NMIPENDSET, 0x80000000
  57              	
  58              	                .cpu    cortex-m0
  59              	                .fpu    softvfp
  60              	
  61              	                .thumb
  62              	                .text
  63              	
  64              	/*--------------------------------------------------------------------------*
  65              	 * Performs a context switch between two threads.
  66              	 *--------------------------------------------------------------------------*/
  67              	                .thumb_func
  68              	                .globl  _port_switch
  69              	_port_switch:
  70 0000 F0B5     	                push    {r4, r5, r6, r7, lr}
  71 0002 4446     	                mov     r4, r8
  72 0004 4D46     	                mov     r5, r9
  73 0006 5646     	                mov     r6, r10
  74 0008 5F46     	                mov     r7, r11
  75 000a F0B4     	                push    {r4, r5, r6, r7}
  76              	                
ARM GAS  /tmp/ccapTTZd.s 			page 8


  77 000c 6B46     	                mov     r3, sp
  78 000e CB60     	                str     r3, [r1, #CONTEXT_OFFSET]
  79 0010 C368     	                ldr     r3, [r0, #CONTEXT_OFFSET]
  80 0012 9D46     	                mov     sp, r3
  81              	                
  82 0014 F0BC     	                pop     {r4, r5, r6, r7}
  83 0016 A046     	                mov     r8, r4
  84 0018 A946     	                mov     r9, r5
  85 001a B246     	                mov     r10, r6
  86 001c BB46     	                mov     r11, r7
  87 001e F0BD     	                pop     {r4, r5, r6, r7, pc}
  88              	
  89              	/*--------------------------------------------------------------------------*
  90              	 * Start a thread by invoking its work function.
  91              	 *
  92              	 * Threads execution starts here, the code leaves the system critical zone
  93              	 * and then jumps into the thread function passed in register R4. The
  94              	 * register R5 contains the thread parameter. The function chThdExit() is
  95              	 * called on thread function return.
  96              	 *--------------------------------------------------------------------------*/
  97              	                .thumb_func
  98              	                .globl  _port_thread_start
  99              	_port_thread_start:
 100              	#if CH_DBG_SYSTEM_STATE_CHECK
 101              	                bl      _dbg_check_unlock
 102              	#endif
 103              	#if CH_DBG_STATISTICS
 104              	                bl      _stats_stop_measure_crit_thd
 105              	#endif
 106 0020 62B6     	                cpsie   i
 107 0022 281C     	                mov     r0, r5
 108 0024 A047     	                blx     r4
 109 0026 0020     	                movs    r0, #0              /* MSG_OK */
 110 0028 FFF7FEFF 	                bl      chThdExit
 111 002c FEE7     	_zombies:       b       _zombies
 112              	
 113              	/*--------------------------------------------------------------------------*
 114              	 * Post-IRQ switch code.
 115              	 *
 116              	 * Exception handlers return here for context switching.
 117              	 *--------------------------------------------------------------------------*/
 118              	                .thumb_func
 119              	                .globl  _port_switch_from_isr
 120              	_port_switch_from_isr:
 121              	#if CH_DBG_STATISTICS
 122              	                bl      _stats_start_measure_crit_thd
 123              	#endif
 124              	#if CH_DBG_SYSTEM_STATE_CHECK
 125              	                bl      _dbg_check_lock
 126              	#endif
 127 002e FFF7FEFF 	                bl      chSchDoReschedule
 128              	#if CH_DBG_SYSTEM_STATE_CHECK
 129              	                bl      _dbg_check_unlock
 130              	#endif
 131              	#if CH_DBG_STATISTICS
 132              	                bl      _stats_stop_measure_crit_thd
 133              	#endif
ARM GAS  /tmp/ccapTTZd.s 			page 9


 134              	                .globl  _port_exit_from_isr
 135              	_port_exit_from_isr:
 136 0032 024A     	                ldr     r2, .L2
 137 0034 024B     	                ldr     r3, .L3
 138 0036 1360     	                str     r3, [r2, #0]
 139              	#if CORTEX_ALTERNATE_SWITCH
 140              	                cpsie   i
 141              	#endif
 142 0038 FEE7     	.L1:            b       .L1
 143              	
 144 003a C046     	                .align  2
 145 003c 04ED00E0 	.L2:            .word   SCB_ICSR
 146              	#if CORTEX_ALTERNATE_SWITCH
 147              	.L3:            .word   ICSR_PENDSVSET
 148              	#else
 149 0040 00000080 	.L3:            .word   ICSR_NMIPENDSET
ARM GAS  /tmp/ccapTTZd.s 			page 10


DEFINED SYMBOLS
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:54     *ABS*:00000000e000ed04 SCB_ICSR
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:55     *ABS*:0000000010000000 ICSR_PENDSVSET
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:56     *ABS*:0000000080000000 ICSR_NMIPENDSET
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:69     .text:0000000000000000 _port_switch
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:70     .text:0000000000000000 $t
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:99     .text:0000000000000020 _port_thread_start
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:111    .text:000000000000002c _zombies
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:120    .text:000000000000002e _port_switch_from_isr
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:135    .text:0000000000000032 _port_exit_from_isr
../../incl/ChibiOS/os/common/ports/ARMCMx/compilers/GCC/chcoreasm_v6m.S:145    .text:000000000000003c $d

UNDEFINED SYMBOLS
chThdExit
chSchDoReschedule
